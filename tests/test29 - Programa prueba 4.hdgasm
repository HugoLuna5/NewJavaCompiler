.data 
VT_A_10:                    DW met_haceAlgo_51 ; Metodo haceAlgo cuyo offset es 0 
.data 
VT_Node_11:                    DW met_setSiguiente_54 ; Metodo setSiguiente cuyo offset es 0 
                   DW met_setElem_57 ; Metodo setElem cuyo offset es 1 
                   DW met_toString_58 ; Metodo toString cuyo offset es 2 
                   DW met_getElem_55 ; Metodo getElem cuyo offset es 3 
                   DW met_getSiguiente_56 ; Metodo getSiguiente cuyo offset es 4 
.data 
VT_Object_8: NOP             ; VT de la clase Object 
.data 
VT_System_9: NOP             ; VT de la clase System 
.code 
                   PUSH simple_heap_init 
                   CALL            
                   PUSH met_main_50 
                   CALL            
                   HALT            
simple_heap_init: RET 0           ; Retorna inmediatamente 
simple_malloc: LOADFP          ; Inicialización unidad 
                   LOADSP          
                   STOREFP         ; Finaliza inicialización del RA 
                   LOADHL          ; hl 
                   DUP             ; hl 
                   PUSH 1          ; 1 
                   ADD             ; hl+1 
                   STORE 4         ; Guarda el resultado (un puntero a la primer celda de la región de memoria) 
                   LOAD 3          ; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo) 
                   ADD             
                   STOREHL         ; Mueve el heap limit (hl). Expande el heap 
                   STOREFP         
                   RET 1           ; Retorna eliminando el parámetro 
.data 
mensaje_error_cast: DW "[Excepcion] Se produjo error al intentar castear",0 ; Mensaje para casteos erroneos 
.code 
error_cast: PUSH mensaje_error_cast ; Apilo msj de error 
                   SPRINT          
                   HALT            
met_A_52: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_main_50: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   RMEM 5          ; Se declaran 5 variables locales. Reservo lugar. 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 4          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Node_11 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 11         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 1          ; Apilo un 1 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Node_53 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE 0         ; Guardo parametro/var local a 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 4          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Node_11 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 11         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 3          ; Apilo un 3 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Node_53 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -1        ; Guardo parametro/var local b 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 4          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Node_11 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 11         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 5          ; Apilo un 5 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Node_53 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -2        ; Guardo parametro/var local c 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 4          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Node_11 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 11         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 7          ; Apilo un 7 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Node_53 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -3        ; Guardo parametro/var local d 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 4          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Node_11 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 11         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 9          ; Apilo un 9 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Node_53 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -4        ; Guardo parametro/var local e 
                   LOAD -2         ; Cargo parametro/var local c 
                   LOAD 0          ; Cargo parametro/var local a 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo setSiguiente 
                   CALL            
                   LOAD 0          ; Cargo parametro/var local a 
                   LOAD -1         ; Cargo parametro/var local b 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo setSiguiente 
                   CALL            
                   LOAD -1         ; Cargo parametro/var local b 
                   LOAD -4         ; Cargo parametro/var local e 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo setSiguiente 
                   CALL            
                   LOAD -4         ; Cargo parametro/var local e 
                   LOAD -3         ; Cargo parametro/var local d 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo setSiguiente 
                   CALL            
                   LOAD -2         ; Cargo parametro/var local c 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 2       ; Cargo el offset del metodo toString 
                   CALL            
                   PUSH met_println_45 ; Preparo para llamar al metodo System.println 
                   CALL            
                   LOAD -2         ; Cargo parametro/var local c 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 4       ; Cargo el offset del metodo getSiguiente 
                   CALL            
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 4       ; Cargo el offset del metodo getSiguiente 
                   CALL            
                   PUSH 32         ; Apilo un 32 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 1       ; Cargo el offset del metodo setElem 
                   CALL            
                   LOAD -2         ; Cargo parametro/var local c 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 2       ; Cargo el offset del metodo toString 
                   CALL            
                   PUSH met_println_45 ; Preparo para llamar al metodo System.println 
                   CALL            
                   FMEM 5          ; Libero las variables locales declaradas dentro de mi bloque 
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_haceAlgo_51: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   PUSH 15         ; Apilo un 15 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
.data 
str_59: DW "Codigo inalcanzable",0 ; Guardo un string 
.code 
                   PUSH str_59     ; Apilo un string 
                   PUSH met_printSln_49 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_Node_53: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 4          ; Cargo parametro/var local x 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 2      ; Actualizo el valor de elem 
                   PUSH 0          ; Apilo NULL 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 3      ; Actualizo el valor de sig 
                   STOREFP         ; Reestablece el contexto 
                   RET 2           ; Retorna de la llamada, liberando parametros 
met_setSiguiente_54: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 4          ; Cargo parametro/var local s 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 3      ; Actualizo el valor de sig 
                   STOREFP         ; Reestablece el contexto 
                   RET 2           ; Retorna de la llamada, liberando parametros 
met_setElem_57: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 4          ; Cargo parametro/var local x 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 2      ; Actualizo el valor de elem 
                   STOREFP         ; Reestablece el contexto 
                   RET 2           ; Retorna de la llamada, liberando parametros 
met_toString_58: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 2       ; Cargo variable de instancia 2 
                   PUSH met_printI_43 ; Preparo para llamar al metodo System.printI 
                   CALL            
                   PUSH 45         ; Apilo un caracter - 
                   PUSH met_printC_42 ; Preparo para llamar al metodo System.printC 
                   CALL            
                   PUSH 62         ; Apilo un caracter > 
                   PUSH met_printC_42 ; Preparo para llamar al metodo System.printC 
                   CALL            
                                   ; Comienzo del IF_60 
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 3       ; Cargo variable de instancia 3 
                   PUSH 0          ; Apilo NULL 
                   NE              
                   BF IF_L_60      
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 3       ; Cargo variable de instancia 3 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 2       ; Cargo el offset del metodo toString 
                   CALL            
IF_L_60: NOP             ;  
                                   ; Fin del IF_60 
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_getElem_55: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 2       ; Cargo variable de instancia 2 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_getSiguiente_56: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 3       ; Cargo variable de instancia 3 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_Object_38: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_System_39: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printC_42: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printS_44: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_println_45: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printCln_47: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printSln_49: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_read_40: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   READ            
                   STORE 3         
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printB_41: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printIln_48: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printI_43: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printBln_46: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
