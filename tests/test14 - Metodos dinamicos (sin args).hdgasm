.data 
VT_A_49: NOP             ; VT de la clase A 
.data 
VT_B_50:                    DW met_m1_285   ; Metodo m1 cuyo offset es 0 
.data 
VT_C_51:                    DW met_m1_285   ; Metodo m1 cuyo offset es 0 
                   DW met_m2_287   ; Metodo m2 cuyo offset es 1 
.data 
VT_D_52:                    DW met_m1_285   ; Metodo m1 cuyo offset es 0 
                   DW met_m2_287   ; Metodo m2 cuyo offset es 1 
.data 
VT_Object_47: NOP             ; VT de la clase Object 
.data 
VT_System_48: NOP             ; VT de la clase System 
.code 
                   PUSH simple_heap_init 
                   CALL            
                   PUSH met_main_283 
                   CALL            
                   HALT            
simple_heap_init: RET 0           ; Retorna inmediatamente 
simple_malloc: LOADFP          ; Inicialización unidad 
                   LOADSP          
                   STOREFP         ; Finaliza inicialización del RA 
                   LOADHL          ; hl 
                   DUP             ; hl 
                   PUSH 1          ; 1 
                   ADD             ; hl+1 
                   STORE 4         ; Guarda el resultado (un puntero a la primer celda de la región de memoria) 
                   LOAD 3          ; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo) 
                   ADD             
                   STOREHL         ; Mueve el heap limit (hl). Expande el heap 
                   STOREFP         
                   RET 1           ; Retorna eliminando el parámetro 
.data 
mensaje_error_cast: DW "[Excepcion] Se produjo error al intentar castear",0 ; Mensaje para casteos erroneos 
.code 
error_cast: PUSH mensaje_error_cast ; Apilo msj de error 
                   SPRINT          
                   HALT            
met_A_284: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_main_283: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   RMEM 1          ; Se declaran 1 variables locales. Reservo lugar. 
                   RMEM 1          ; Se declaran 1 variables locales. Reservo lugar. 
                   RMEM 1          ; Se declaran 1 variables locales. Reservo lugar. 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 2          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_B_50    ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 50         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH met_B_286  ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE 0         ; Guardo parametro/var local b 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 2          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_C_51    ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 51         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH met_C_288  ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -1        ; Guardo parametro/var local c 
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 2          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_D_52    ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 52         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH met_D_289  ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -2        ; Guardo parametro/var local d 
.data 
str_290: DW "Soy B... ",0 ; Guardo un string 
.code 
                   PUSH str_290    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
                   LOAD 0          ; Cargo parametro/var local b 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo m1 
                   CALL            
.data 
str_291: DW "Soy C... ",0 ; Guardo un string 
.code 
                   PUSH str_291    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
                   LOAD -1         ; Cargo parametro/var local c 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo m1 
                   CALL            
                   LOAD -1         ; Cargo parametro/var local c 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 1       ; Cargo el offset del metodo m2 
                   CALL            
.data 
str_292: DW "Soy D... ",0 ; Guardo un string 
.code 
                   PUSH str_292    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
                   LOAD -2         ; Cargo parametro/var local d 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo m1 
                   CALL            
                   LOAD -2         ; Cargo parametro/var local d 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 1       ; Cargo el offset del metodo m2 
                   CALL            
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 2          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_D_52    ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 52         ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH met_D_289  ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE 0         ; Guardo parametro/var local b 
.data 
str_293: DW "Soy D (con new B) ",0 ; Guardo un string 
.code 
                   PUSH str_293    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
                   LOAD 0          ; Cargo parametro/var local b 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo m1 
                   CALL            
                   FMEM 3          ; Libero las variables locales declaradas dentro de mi bloque 
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_B_286: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_m1_285: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
.data 
str_294: DW "Entre al m1 de B ",0 ; Guardo un string 
.code 
                   PUSH str_294    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
.data 
str_295: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_295    ; Apilo un string 
                   PUSH met_printSln_282 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_C_288: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_m2_287: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
.data 
str_296: DW "Entre al m2 de C ",0 ; Guardo un string 
.code 
                   PUSH str_296    ; Apilo un string 
                   PUSH met_printS_277 ; Preparo para llamar al metodo System.printS 
                   CALL            
.data 
str_297: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_297    ; Apilo un string 
                   PUSH met_printSln_282 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_D_289: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_Object_271: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_System_272: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printC_275: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printS_277: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_println_278: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printCln_280: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printSln_282: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_read_273: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   READ            
                   STORE 3         
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printB_274: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printIln_281: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printI_276: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printBln_279: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
