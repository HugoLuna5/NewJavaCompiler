.data 
VT_A_2: NOP             ; VT de la clase A 
.data 
VT_Persona_3:                    DW met_getAnio_17 ; Metodo getAnio cuyo offset es 0 
                   DW met_compareTo_18 ; Metodo compareTo cuyo offset es 1 
                   DW met_getMes_16 ; Metodo getMes cuyo offset es 2 
                   DW met_getDia_15 ; Metodo getDia cuyo offset es 3 
.data 
VT_SystemIO_4: NOP             ; VT de la clase SystemIO 
.data 
VT_Object_0: NOP             ; VT de la clase Object 
.data 
VT_System_1: NOP             ; VT de la clase System 
.code 
                   PUSH simple_heap_init 
                   CALL            
                   PUSH met_main_12 
                   CALL            
                   HALT            
simple_heap_init: RET 0           ; Retorna inmediatamente 
simple_malloc: LOADFP          ; Inicialización unidad 
                   LOADSP          
                   STOREFP         ; Finaliza inicialización del RA 
                   LOADHL          ; hl 
                   DUP             ; hl 
                   PUSH 1          ; 1 
                   ADD             ; hl+1 
                   STORE 4         ; Guarda el resultado (un puntero a la primer celda de la región de memoria) 
                   LOAD 3          ; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo) 
                   ADD             
                   STOREHL         ; Mueve el heap limit (hl). Expande el heap 
                   STOREFP         
                   RET 1           ; Retorna eliminando el parámetro 
.data 
mensaje_error_cast: DW "[Excepcion] Se produjo error al intentar castear",0 ; Mensaje para casteos erroneos 
.code 
error_cast: PUSH mensaje_error_cast ; Apilo msj de error 
                   SPRINT          
                   HALT            
met_A_13: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_main_12: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   RMEM 2          ; Se declaran 2 variables locales. Reservo lugar. 
                   RMEM 3          ; Se declaran 3 variables locales. Reservo lugar. 
                   PUSH 25         ; Apilo un 25 
                   STORE -2        ; Guardo parametro/var local d 
                   PUSH 12         ; Apilo un 12 
                   STORE -3        ; Guardo parametro/var local m 
                   PUSH 2016       ; Apilo un 2016 
                   STORE -4        ; Guardo parametro/var local an 
.data 
str_21: DW "Creando Persona 1",0 ; Guardo un string 
.code 
                   PUSH str_21     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 5          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Persona_3 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 3          ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 25         ; Apilo un 25 
                   SWAP            ; Intercambio this por expresion 
                   PUSH 12         ; Apilo un 12 
                   SWAP            ; Intercambio this por expresion 
                   PUSH 2016       ; Apilo un 2016 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Persona_14 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE 0         ; Guardo parametro/var local a 
.data 
str_22: DW "Creando Persona 2",0 ; Guardo un string 
.code 
                   PUSH str_22     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 5          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Persona_3 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 3          ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   LOAD -2         ; Cargo parametro/var local d 
                   SWAP            ; Intercambio this por expresion 
                   LOAD -3         ; Cargo parametro/var local m 
                   SWAP            ; Intercambio this por expresion 
                   LOAD -4         ; Cargo parametro/var local an 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Persona_14 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -1        ; Guardo parametro/var local b 
                                   ; Comienzo del IF_23 
                   LOAD 0          ; Cargo parametro/var local a 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   LOAD -1         ; Cargo parametro/var local b 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 1       ; Cargo el offset del metodo compareTo 
                   CALL            
                   BF IF_L1_23     
.data 
str_24: DW "Las personas tienen la misma fecha de nacimiento",0 ; Guardo un string 
.code 
                   PUSH str_24     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   JUMP IF_L2_23   
IF_L1_23: NOP             ;  
.data 
str_25: DW "Las personas cumplen en dias distintos",0 ; Guardo un string 
.code 
                   PUSH str_25     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_23: NOP             ;  
                                   ; Fin del IF_23 
.data 
str_26: DW "Creando Persona Nueva",0 ; Guardo un string 
.code 
                   PUSH str_26     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   RMEM 1          ; Reservo espacio para la referencia al objeto del Ctor 
                   PUSH 5          ; Apilo el tamanio del CIR 
                   PUSH simple_malloc ; Preparo llamada a malloc 
                   CALL            ; Invoco al malloc 
                   DUP             ; Duplico la referencia al CIR 
                   PUSH VT_Persona_3 ; Guardo la etiqueta de la VT en el CIR 
                   STOREREF 0      
                   DUP             
                   PUSH 3          ; Guardo el ID de la clase en el CIR 
                   STOREREF 1      
                   DUP             
                   PUSH 1          ; Apilo un 1 
                   SWAP            ; Intercambio this por expresion 
                   PUSH 1          ; Apilo un 1 
                   SWAP            ; Intercambio this por expresion 
                   PUSH 2000       ; Apilo un 2000 
                   SWAP            ; Intercambio this por expresion 
                   PUSH met_Persona_14 ; Llamo al constructor (estoy en un new) 
                   CALL            
                   STORE -1        ; Guardo parametro/var local b 
                                   ; Comienzo del IF_27 
                   LOAD 0          ; Cargo parametro/var local a 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   LOAD -1         ; Cargo parametro/var local b 
                   SWAP            ; Intercambio el this con lo evaluado por el parametro actual 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 1       ; Cargo el offset del metodo compareTo 
                   CALL            
                   BF IF_L1_27     
.data 
str_28: DW "Las personas tienen la misma fecha de nacimiento",0 ; Guardo un string 
.code 
                   PUSH str_28     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   JUMP IF_L2_27   
IF_L1_27: NOP             ;  
.data 
str_29: DW "Las personas cumplen en dias distintos",0 ; Guardo un string 
.code 
                   PUSH str_29     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_27: NOP             ;  
                                   ; Fin del IF_27 
                   FMEM 5          ; Libero las variables locales declaradas dentro de mi bloque 
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_Persona_14: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 6          ; Cargo parametro/var local d 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 3      ; Actualizo el valor de dia 
                   LOAD 5          ; Cargo parametro/var local m 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 2      ; Actualizo el valor de mes 
                   LOAD 4          ; Cargo parametro/var local a 
                   LOAD 3          ; Cargo referencia al 'this' 
                   SWAP            ; Cambio valor del this por el valor a guardar 
                   STOREREF 4      ; Actualizo el valor de anio 
                   STOREFP         ; Reestablece el contexto 
                   RET 4           ; Retorna de la llamada, liberando parametros 
met_getAnio_17: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 4       ; Cargo variable de instancia 4 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_compareTo_18: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 3       ; Cargo variable de instancia 3 
                   LOAD 4          ; Cargo parametro/var local p 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 3       ; Cargo el offset del metodo getDia 
                   CALL            
                   EQ              
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 2       ; Cargo variable de instancia 2 
                   LOAD 4          ; Cargo parametro/var local p 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 2       ; Cargo el offset del metodo getMes 
                   CALL            
                   EQ              
                   AND             
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 4       ; Cargo variable de instancia 4 
                   LOAD 4          ; Cargo parametro/var local p 
                   RMEM 1          ; Estoy por hacer llamada encadenada, reservo para el valor de retorno 
                   SWAP            ; Bajo el this 
                   DUP             ; Duplico this 
                   LOADREF 0       
                   LOADREF 0       ; Cargo el offset del metodo getAnio 
                   CALL            
                   EQ              
                   AND             
                   STORE 5         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 2           
                   STOREFP         ; Reestablece el contexto 
                   RET 2           ; Retorna de la llamada, liberando parametros 
met_getMes_16: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 2       ; Cargo variable de instancia 2 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_getDia_15: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          ; Cargo referencia al 'this' 
                   LOADREF 3       ; Cargo variable de instancia 3 
                   STORE 4         
                   FMEM 0          ; Libero 0 variables locales 
                   STOREFP         
                   RET 1           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_SystemIO_20: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_readNumero_19: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   RMEM 3          ; Se declaran 3 variables locales. Reservo lugar. 
                   PUSH 0          ; Apilo un 0 
                   STORE 0         ; Guardo parametro/var local rta 
                   PUSH 0          ; Apilo un 0 
                   STORE -2        ; Guardo parametro/var local num 
                                   ; Comienzo del WHILE_30 
WHILE_L1_30: NOP             ;  
                   LOAD -2         ; Cargo parametro/var local num 
                   PUSH 10         ; Apilo un 10 
                   NE              
                   LOAD -2         ; Cargo parametro/var local num 
                   PUSH 13         ; Apilo un 13 
                   NE              
                   AND             
                   BF WHILE_L2_30  
                   RMEM 1          ; Voy a llamar a un metodo estatico (no void), reservo lugar para lo que devuelva 
                   PUSH met_read_2 ; Preparo para llamar al metodo System.read 
                   CALL            
                   STORE -2        ; Guardo parametro/var local num 
                   LOAD -2         ; Cargo parametro/var local num 
                   PUSH 48         ; Apilo un 48 
                   SUB             
                   STORE -1        ; Guardo parametro/var local aux 
                                   ; Comienzo del IF_31 
                   LOAD -2         ; Cargo parametro/var local num 
                   PUSH 10         ; Apilo un 10 
                   NE              
                   LOAD -2         ; Cargo parametro/var local num 
                   PUSH 13         ; Apilo un 13 
                   NE              
                   AND             
                   BF IF_L_31      
                   LOAD 0          ; Cargo parametro/var local rta 
                   PUSH 10         ; Apilo un 10 
                   MUL             
                   LOAD -1         ; Cargo parametro/var local aux 
                   ADD             
                   STORE 0         ; Guardo parametro/var local rta 
IF_L_31: NOP             ;  
                                   ; Fin del IF_31 
                   JUMP WHILE_L1_30 
WHILE_L2_30: NOP             ;  
                                   ; Fin del WHILE_30 
                   LOAD 0          ; Cargo parametro/var local rta 
                   STORE 3         
                   FMEM 3          ; Libero 3 variables locales 
                   STOREFP         
                   RET 0           
                   FMEM 3          ; Libero las variables locales declaradas dentro de mi bloque 
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_Object_0: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_System_1: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printC_4: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printS_6: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_println_7: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printCln_9: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printSln_11: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_read_2: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   READ            
                   STORE 3         
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printB_3: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printIln_10: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printI_5: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printBln_8: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
