.data 
VT_A_2: NOP             ; VT de la clase A 
.data 
VT_Object_0: NOP             ; VT de la clase Object 
.data 
VT_System_1: NOP             ; VT de la clase System 
.code 
                   PUSH simple_heap_init 
                   CALL            
                   PUSH met_main_12 
                   CALL            
                   HALT            
simple_heap_init: RET 0           ; Retorna inmediatamente 
simple_malloc: LOADFP          ; Inicialización unidad 
                   LOADSP          
                   STOREFP         ; Finaliza inicialización del RA 
                   LOADHL          ; hl 
                   DUP             ; hl 
                   PUSH 1          ; 1 
                   ADD             ; hl+1 
                   STORE 4         ; Guarda el resultado (un puntero a la primer celda de la región de memoria) 
                   LOAD 3          ; Carga la cantidad de celdas a alojar (parámetro que debe ser positivo) 
                   ADD             
                   STOREHL         ; Mueve el heap limit (hl). Expande el heap 
                   STOREFP         
                   RET 1           ; Retorna eliminando el parámetro 
.data 
mensaje_error_cast: DW "[Excepcion] Se produjo error al intentar castear",0 ; Mensaje para casteos erroneos 
.code 
error_cast: PUSH mensaje_error_cast ; Apilo msj de error 
                   SPRINT          
                   HALT            
met_A_13: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_main_12: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   RMEM 3          ; Se declaran 3 variables locales. Reservo lugar. 
                   RMEM 2          ; Se declaran 2 variables locales. Reservo lugar. 
                   RMEM 1          ; Se declaran 1 variables locales. Reservo lugar. 
                   PUSH 2          ; Apilo un 2 
                   PUSH 3          ; Apilo un 3 
                   ADD             
                   PUSH 6          ; Apilo un 6 
                   MUL             
                   PUSH 2          ; Apilo un 2 
                   DIV             
                   STORE 0         ; Guardo parametro/var local a 
                   LOAD 0          ; Cargo parametro/var local a 
                   PUSH 100        ; Apilo un 100 
                   MUL             
                   STORE -1        ; Guardo parametro/var local b 
                   LOAD -1         ; Cargo parametro/var local b 
                   NEG             
                   STORE -2        ; Guardo parametro/var local c 
                   PUSH 1          ; Apilo TRUE 
                   STORE -3        ; Guardo parametro/var local d 
                   PUSH 0          ; Apilo FALSE 
                   STORE -4        ; Guardo parametro/var local e 
.data 
str_14: DW "Hola",0     ; Guardo un string 
.code 
                   PUSH str_14     ; Apilo un string 
                   STORE -5        ; Guardo parametro/var local str 
                                   ; Comienzo del IF_15 
                   LOAD -3         ; Cargo parametro/var local d 
                   LOAD -4         ; Cargo parametro/var local e 
                   AND             
                   BF IF_L1_15     
.data 
str_16: DW "No deberia entrar por aca [Hay un error]",0 ; Guardo un string 
.code 
                   PUSH str_16     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   JUMP IF_L2_15   
IF_L1_15: NOP             ;  
.data 
str_17: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_17     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_15: NOP             ;  
                                   ; Fin del IF_15 
                                   ; Comienzo del IF_18 
                   LOAD -1         ; Cargo parametro/var local b 
                   PUSH 2          ; Apilo un 2 
                   MOD             
                   PUSH 0          ; Apilo un 0 
                   EQ              
                   BF IF_L1_18     
.data 
str_19: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_19     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   JUMP IF_L2_18   
IF_L1_18: NOP             ;  
.data 
str_20: DW "No deberia entrar por aca [Hay un error]",0 ; Guardo un string 
.code 
                   PUSH str_20     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_18: NOP             ;  
                                   ; Fin del IF_18 
                                   ; Comienzo del IF_21 
                   LOAD -2         ; Cargo parametro/var local c 
                   LOAD -1         ; Cargo parametro/var local b 
                   NE              
                   BF IF_L_21      
.data 
str_22: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_22     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L_21: NOP             ;  
                                   ; Fin del IF_21 
                                   ; Comienzo del IF_23 
                   LOAD -2         ; Cargo parametro/var local c 
                   LOAD -1         ; Cargo parametro/var local b 
                   NEG             
                   EQ              
                   BF IF_L_23      
.data 
str_24: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_24     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L_23: NOP             ;  
                                   ; Fin del IF_23 
                                   ; Comienzo del IF_25 
                   LOAD -3         ; Cargo parametro/var local d 
                   NOT             
                   LOAD -4         ; Cargo parametro/var local e 
                   OR              
                   BF IF_L1_25     
.data 
str_26: DW "No deberia entrar por aca [Hay un error]",0 ; Guardo un string 
.code 
                   PUSH str_26     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   JUMP IF_L2_25   
IF_L1_25: NOP             ;  
.data 
str_27: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_27     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_25: NOP             ;  
                                   ; Fin del IF_25 
                                   ; Comienzo del IF_28 
                   LOAD -3         ; Cargo parametro/var local d 
                   LOAD -4         ; Cargo parametro/var local e 
                   NOT             
                   AND             
                   BF IF_L1_28     
.data 
str_29: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_29     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   PUSH 123        ; Apilo un 123 
                   STORE 0         ; Guardo parametro/var local a 
                   JUMP IF_L2_28   
IF_L1_28: NOP             ;  
.data 
str_30: DW "No deberia entrar por aca [Hay un error]",0 ; Guardo un string 
.code 
                   PUSH str_30     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L2_28: NOP             ;  
                                   ; Fin del IF_28 
                                   ; Comienzo del IF_31 
                   LOAD 0          ; Cargo parametro/var local a 
                   PUSH 123        ; Apilo un 123 
                   EQ              
                   BF IF_L_31      
.data 
str_32: DW "[OK]",0     ; Guardo un string 
.code 
                   PUSH str_32     ; Apilo un string 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
IF_L_31: NOP             ;  
                                   ; Fin del IF_31 
                   LOAD -5         ; Cargo parametro/var local str 
                   PUSH met_printSln_11 ; Preparo para llamar al metodo System.printSln 
                   CALL            
                   FMEM 6          ; Libero las variables locales declaradas dentro de mi bloque 
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_Object_0: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_System_1: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printC_4: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printS_6: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_println_7: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printCln_9: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   CPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printSln_11: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   SPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_read_2: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   READ            
                   STORE 3         
                   STOREFP         ; Reestablece el contexto 
                   RET 0           ; Retorna de la llamada, liberando parametros 
met_printB_3: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printIln_10: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printI_5: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   IPRINT          
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
met_printBln_8: LOADFP          ; Guardar enlace dinamico 
                   LOADSP          ; Inicializar el FP 
                   STOREFP         ;  
                   LOAD 3          
                   BPRINT          
                   PRNLN           
                   STOREFP         ; Reestablece el contexto 
                   RET 1           ; Retorna de la llamada, liberando parametros 
